FUNCTION_BLOCK "LPMLV2022_UnitModeStateManagerBool"
TITLE = LPMLV2022_UnitModeStateManagerBool
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : APC_ERLF
FAMILY : OMAC
VERSION : 1.0
//Support: tech.team.motioncontrol@siemens.com
   VAR_INPUT 
      ProductionModeRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request change to unit mode Production
      MaintenanceModeRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request change to unit mode Maintenance
      ManualModeRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request change to unit mode Manual
      UserMode01Request { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request change to user-defined unit mode 01
      UserMode02Request : Bool;   // Rising edge: Request change to user-defined unit mode 02
      UserMode03Request : Bool;   // Rising edge: Request change to user-defined unit mode 03
      UserMode04Request : Bool;   // Rising edge: Request change to user-defined unit mode 04
      UserMode05Request : Bool;   // Rising edge: Request change to user-defined unit mode 05
      ResetCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Reset
      StartCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Start
      StopCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Stop
      HoldCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Hold
      UnholdCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Unhold
      SuspendCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Suspend
      UnsuspendCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Unsuspend
      AbortCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Abort
      ClearCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Clear
      CompleteCmdRequest { S7_HiddenAssignment := 'Show'} : Bool;   // Rising edge: Request control command Complete
      SC : Bool;   // State change from FALSE to TRUE (rising edge) triggers state complete signal
      configuration : "LPMLV2022_typeConfiguration" := ((), [()], [16#0, 31(16#0000_0214)], (), ());   // FB configuration (is taken into account in first call after STOP/RUN)
   END_VAR

   VAR_OUTPUT 
      UnitModeCurrent { ExternalWritable := 'False'} : DInt := "LPMLV2022_MODE_INVALID";   // Current unit mode
      StateCurrent { ExternalWritable := 'False'} : DInt := "LPMLV2022_STATE_UNDEFINED";   // Current state
      ProductionModeActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: Unit mode Production is currently active
      MaintenanceModeActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: Unit mode Maintenance is currently active
      ManualModeActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: Unit mode Manual is currently active
      UserMode01Active { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: User-defined unit mode 01 is currently active
      UserMode02Active { ExternalWritable := 'False'} : Bool;   // TRUE: User-defined unit mode 02 is currently active
      UserMode03Active { ExternalWritable := 'False'} : Bool;   // TRUE: User-defined unit mode 03 is currently active
      UserMode04Active { ExternalWritable := 'False'} : Bool;   // TRUE: User-defined unit mode 04 is currently active
      UserMode05Active { ExternalWritable := 'False'} : Bool;   // TRUE: User-defined unit mode 05 is currently active
      ClearingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Clearing is currently active
      StoppedStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Stopped is currently active
      StartingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Starting is currently active
      IdleStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Idle is currently active
      SuspendedStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Suspended is currently active
      ExecuteStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Execute is currently active
      StoppingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Stopping is currently active
      AbortingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Aborting is currently active
      AbortedStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Aborted is currently active
      HoldingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Holding is currently active
      HeldStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Held is currently active
      UnholdingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Unholding is currently active
      SuspendingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Suspending is currently active
      UnsuspendingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Unsuspending is currently active
      ResettingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Resetting is currently active
      CompletingStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Completing is currently active
      CompletedStateActive { ExternalWritable := 'False'; S7_HiddenAssignment := 'Show'} : Bool;   // TRUE: State Completed is currently active
      unitModeChangeNotAllowed { ExternalWritable := 'False'} : Bool;   // TRUE: Requested unit mode change is not allowed (output is reset with the next successful unit mode change or if all corresponding request inputs are set to FALSE)
      cntrlCmdNotAllowed { ExternalWritable := 'False'} : Bool;   // TRUE: Control command is not allowed (output is reset with the next successful control command or if all corresponding request inputs are set to FALSE)
   END_VAR

   VAR 
      instUnitModeStateManager { ExternalWritable := 'False'; S7_SetPoint := 'False'} : "LPMLV2022_UnitModeStateManager";   // Instance of LPMLV2022_UnitModeStateManager
      statFirstCycle { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := TRUE;   // First cycle of run
      statUnitModeCurrentInternalOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt := "LPMLV2022_MODE_INVALID";   // For edge detection
      statStateInternalOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt := "LPMLV2022_STATE_UNDEFINED";   // For edge detection
      statBooleanInterfaceModeOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DWord;   // For edge detection
      statBooleanInterfaceCmdOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;   // For edge detection
   END_VAR

   VAR_TEMP 
      tempBooleanInterfaceMode : DWord;   // Status of boolean Mode inputs
      tempBooleanInterfaceCmd : Word;   // Status of boolean Cmd inputs except abort and stop
   END_VAR


BEGIN
	REGION HEADER
	  //================================================================================
	  // SIEMENS AG
	  // (c)Copyright 2023 All Rights Reserved
	  //--------------------------------------------------------------------------------
	  // Library: LPMLV2022 
	  // Tested with: S7-1211 with FW version V4.2, S7-1511-1 PN with FW version V2.6
	  // Engineering: TIA Portal V15.1
	  // Restrictions: -
	  // Requirements: S7-1200 FW 4.2 / S7-1500 FW 2.6
	  // Functionality: Machine and Unit States according to ANSI/ISA-TR88.00.02-2022
	  //                (if the default settings are active at 'holdCmdCfg' and 'completeCmdCfg')
	  // Support: tech.team.motioncontrol@siemens.com
	  // Note: Parameter comments are only available in language 'English (United States)'
	  //--------------------------------------------------------------------------------
	  // Change log table:
	  // Version  Date        Expert in charge  Changes applied
	  // 01.00.00 28.02.2023  KT                First released version
	  //================================================================================
	END_REGION
	
	IF #statFirstCycle THEN // Initialize values in first cycle
	  #instUnitModeStateManager.configuration := #configuration; // Copy configuration from input
	  #statFirstCycle := FALSE;
	
	ELSE // As from second cycle
	  //--------------------------------------------------------------------------------------------------
	  // Evaluation of input parameters
	  //--------------------------------------------------------------------------------------------------
	  #instUnitModeStateManager.UnitModeChangeRequest := TRUE; // Change request static TRUE
	
	  // Collect unit mode from boolean inputs
	  #tempBooleanInterfaceMode.%X1  := #ProductionModeRequest;
	  #tempBooleanInterfaceMode.%X2  := #MaintenanceModeRequest;
	  #tempBooleanInterfaceMode.%X3  := #ManualModeRequest;
	  #tempBooleanInterfaceMode.%X4  := #UserMode01Request;
	  #tempBooleanInterfaceMode.%X5  := #UserMode02Request;
	  #tempBooleanInterfaceMode.%X6  := #UserMode03Request;
	  #tempBooleanInterfaceMode.%X7  := #UserMode04Request;
	  #tempBooleanInterfaceMode.%X8  := #UserMode05Request;
	// #tempBooleanInterfaceMode.%X9  := #UserMode06Request;
	// #tempBooleanInterfaceMode.%X10 := #UserMode07Request;
	// #tempBooleanInterfaceMode.%X11 := #UserMode08Request;
	// #tempBooleanInterfaceMode.%X12 := #UserMode09Request;
	// #tempBooleanInterfaceMode.%X13 := #UserMode10Request;
	// #tempBooleanInterfaceMode.%X14 := #UserMode11Request;
	// #tempBooleanInterfaceMode.%X15 := #UserMode12Request;
	// #tempBooleanInterfaceMode.%X16 := #UserMode13Request;
	// #tempBooleanInterfaceMode.%X17 := #UserMode14Request;
	// #tempBooleanInterfaceMode.%X18 := #UserMode15Request;
	// #tempBooleanInterfaceMode.%X19 := #UserMode16Request;
	// #tempBooleanInterfaceMode.%X20 := #UserMode17Request;
	// #tempBooleanInterfaceMode.%X21 := #UserMode18Request;
	// #tempBooleanInterfaceMode.%X22 := #UserMode19Request;
	// #tempBooleanInterfaceMode.%X23 := #UserMode20Request;
	// #tempBooleanInterfaceMode.%X24 := #UserMode21Request;
	// #tempBooleanInterfaceMode.%X25 := #UserMode22Request;
	// #tempBooleanInterfaceMode.%X26 := #UserMode23Request;
	// #tempBooleanInterfaceMode.%X27 := #UserMode24Request;
	// #tempBooleanInterfaceMode.%X28 := #UserMode25Request;
	// #tempBooleanInterfaceMode.%X29 := #UserMode26Request;
	// #tempBooleanInterfaceMode.%X30 := #UserMode27Request;
	// #tempBooleanInterfaceMode.%X31 := #UserMode28Request;
	    
	  // Selection indicator: Rising edge at input, Priority (in case of multiple selection): Manual, Maintenance, User Mode 01..28, Production
	  IF #tempBooleanInterfaceMode.%X3 AND NOT #statBooleanInterfaceModeOld.%X3 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_MANUAL";
	  ELSIF #tempBooleanInterfaceMode.%X2 AND NOT #statBooleanInterfaceModeOld.%X2 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_MAINTENANCE";
	  ELSIF #tempBooleanInterfaceMode.%X4 AND NOT #statBooleanInterfaceModeOld.%X4 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_01";
	  ELSIF #tempBooleanInterfaceMode.%X5 AND NOT #statBooleanInterfaceModeOld.%X5 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_02";
	  ELSIF #tempBooleanInterfaceMode.%X6 AND NOT #statBooleanInterfaceModeOld.%X6 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_03";
	  ELSIF #tempBooleanInterfaceMode.%X7 AND NOT #statBooleanInterfaceModeOld.%X7 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_04";
	  ELSIF #tempBooleanInterfaceMode.%X8 AND NOT #statBooleanInterfaceModeOld.%X8 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_05";
	// ELSIF #tempBooleanInterfaceMode.%X9 AND NOT #statBooleanInterfaceModeOld.%X9 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_06";
	// ELSIF #tempBooleanInterfaceMode.%X10 AND NOT #statBooleanInterfaceModeOld.%X10 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_07";
	// ELSIF #tempBooleanInterfaceMode.%X11 AND NOT #statBooleanInterfaceModeOld.%X11 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_08";
	// ELSIF #tempBooleanInterfaceMode.%X12 AND NOT #statBooleanInterfaceModeOld.%X12 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_09";
	// ELSIF #tempBooleanInterfaceMode.%X13 AND NOT #statBooleanInterfaceModeOld.%X13 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_10";
	// ELSIF #tempBooleanInterfaceMode.%X14 AND NOT #statBooleanInterfaceModeOld.%X14 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_11";
	// ELSIF #tempBooleanInterfaceMode.%X15 AND NOT #statBooleanInterfaceModeOld.%X15 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_12";
	// ELSIF #tempBooleanInterfaceMode.%X16 AND NOT #statBooleanInterfaceModeOld.%X16 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_13";
	// ELSIF #tempBooleanInterfaceMode.%X17 AND NOT #statBooleanInterfaceModeOld.%X17 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_14";
	// ELSIF #tempBooleanInterfaceMode.%X18 AND NOT #statBooleanInterfaceModeOld.%X18 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_15";
	// ELSIF #tempBooleanInterfaceMode.%X19 AND NOT #statBooleanInterfaceModeOld.%X19 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_16";
	// ELSIF #tempBooleanInterfaceMode.%X20 AND NOT #statBooleanInterfaceModeOld.%X20 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_17";
	// ELSIF #tempBooleanInterfaceMode.%X21 AND NOT #statBooleanInterfaceModeOld.%X21 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_18";
	// ELSIF #tempBooleanInterfaceMode.%X22 AND NOT #statBooleanInterfaceModeOld.%X22 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_19";
	// ELSIF #tempBooleanInterfaceMode.%X23 AND NOT #statBooleanInterfaceModeOld.%X23 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_20";
	// ELSIF #tempBooleanInterfaceMode.%X24 AND NOT #statBooleanInterfaceModeOld.%X24 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_21";
	// ELSIF #tempBooleanInterfaceMode.%X25 AND NOT #statBooleanInterfaceModeOld.%X25 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_22";
	// ELSIF #tempBooleanInterfaceMode.%X26 AND NOT #statBooleanInterfaceModeOld.%X26 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_23";
	// ELSIF #tempBooleanInterfaceMode.%X27 AND NOT #statBooleanInterfaceModeOld.%X27 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_24";
	// ELSIF #tempBooleanInterfaceMode.%X28 AND NOT #statBooleanInterfaceModeOld.%X28 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_25";
	// ELSIF #tempBooleanInterfaceMode.%X29 AND NOT #statBooleanInterfaceModeOld.%X29 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_26";
	// ELSIF #tempBooleanInterfaceMode.%X30 AND NOT #statBooleanInterfaceModeOld.%X30 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_27";
	// ELSIF #tempBooleanInterfaceMode.%X31 AND NOT #statBooleanInterfaceModeOld.%X31 THEN
	//   #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_USER_28";
	  ELSIF #tempBooleanInterfaceMode.%X1 AND NOT #statBooleanInterfaceModeOld.%X1 THEN
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_PRODUCTION";
	  ELSIF #tempBooleanInterfaceMode = 16#0000_0000 THEN // all corresponding boolean request inputs are FALSE
	    #instUnitModeStateManager.UnitMode := "LPMLV2022_MODE_INVALID";
	  END_IF;
	  
	  #statBooleanInterfaceModeOld := #tempBooleanInterfaceMode; // Save values for edge detection
	  
	  // State complete signal
	  #instUnitModeStateManager.SC := #SC;
	  
	  // Evaluate CntrlCmd in boolean interface; priority descending: abort, stop, other commands
	  #instUnitModeStateManager.CmdChangeRequest := TRUE; // Change request static TRUE
	  
	  #tempBooleanInterfaceCmd.%X1 := #ResetCmdRequest;
	  #tempBooleanInterfaceCmd.%X2 := #StartCmdRequest;
	  #tempBooleanInterfaceCmd.%X3 := #StopCmdRequest;
	  #tempBooleanInterfaceCmd.%X4 := #HoldCmdRequest;
	  #tempBooleanInterfaceCmd.%X5 := #UnholdCmdRequest;
	  #tempBooleanInterfaceCmd.%X6 := #SuspendCmdRequest;
	  #tempBooleanInterfaceCmd.%X7 := #UnsuspendCmdRequest;
	  #tempBooleanInterfaceCmd.%X8 := #AbortCmdRequest;
	  #tempBooleanInterfaceCmd.%X9 := #ClearCmdRequest;
	  #tempBooleanInterfaceCmd.%X10 := #CompleteCmdRequest;
	  
	  // Selection indicator: Rising edge at input, Priority (in case of multiple selection): abort, stop, complete, reset, start, hold, unhold, suspend, unsuspend, clear
	  IF #tempBooleanInterfaceCmd.%X8 AND NOT #statBooleanInterfaceCmdOld.%X8 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_ABORT";
	  ELSIF #tempBooleanInterfaceCmd.%X3 AND NOT #statBooleanInterfaceCmdOld.%X3 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_STOP";
	  ELSIF #tempBooleanInterfaceCmd.%X10 AND NOT #statBooleanInterfaceCmdOld.%X10 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_COMPLETE";
	  ELSIF #tempBooleanInterfaceCmd.%X1 AND NOT #statBooleanInterfaceCmdOld.%X1 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_RESET";
	  ELSIF #tempBooleanInterfaceCmd.%X2 AND NOT #statBooleanInterfaceCmdOld.%X2 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_START";
	  ELSIF #tempBooleanInterfaceCmd.%X4 AND NOT #statBooleanInterfaceCmdOld.%X4 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_HOLD";
	  ELSIF #tempBooleanInterfaceCmd.%X5 AND NOT #statBooleanInterfaceCmdOld.%X5 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_UNHOLD";
	  ELSIF #tempBooleanInterfaceCmd.%X6 AND NOT #statBooleanInterfaceCmdOld.%X6 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_SUSPEND";
	  ELSIF #tempBooleanInterfaceCmd.%X7 AND NOT #statBooleanInterfaceCmdOld.%X7 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_UNSUSPEND";
	  ELSIF #tempBooleanInterfaceCmd.%X9 AND NOT #statBooleanInterfaceCmdOld.%X9 THEN
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_CLEAR";
	  ELSIF #tempBooleanInterfaceCmd = 16#0000_0000 THEN // all corresponding boolean request inputs are FALSE
	    #instUnitModeStateManager.CntrlCmd := "LPMLV2022_CMD_UNDEFINED";
	  END_IF;
	  
	  #statBooleanInterfaceCmdOld := #tempBooleanInterfaceCmd; // Save values for edge detection
	END_IF;
	
	//--------------------------------------------------------------------------------------------------
	// Call unit mode state manager
	//--------------------------------------------------------------------------------------------------
	#instUnitModeStateManager();
	
	//--------------------------------------------------------------------------------------------------
	// Write outputs including boolean interface outputs 
	//--------------------------------------------------------------------------------------------------
	#UnitModeCurrent := #instUnitModeStateManager.UnitModeCurrent;
	#StateCurrent    := #instUnitModeStateManager.StateCurrent;
	
	IF #instUnitModeStateManager.UnitModeCurrent <> #statUnitModeCurrentInternalOld THEN // Check if new unit mode is selected
	  #ProductionModeActive := FALSE;
	  #MaintenanceModeActive := FALSE;
	  #ManualModeActive := FALSE;
	  #UserMode01Active := FALSE;
	  #UserMode02Active := FALSE;
	  #UserMode03Active := FALSE;
	  #UserMode04Active := FALSE;
	  #UserMode05Active := FALSE;
	  // #UserMode06Active := FALSE;
	  // #UserMode07Active := FALSE;
	  // #UserMode08Active := FALSE;
	  // #UserMode09Active := FALSE;
	  // #UserMode10Active := FALSE;
	  // #UserMode11Active := FALSE;
	  // #UserMode12Active := FALSE;
	  // #UserMode13Active := FALSE;
	  // #UserMode14Active := FALSE;
	  // #UserMode15Active := FALSE;
	  // #UserMode16Active := FALSE;
	  // #UserMode17Active := FALSE;
	  // #UserMode18Active := FALSE;
	  // #UserMode19Active := FALSE;
	  // #UserMode20Active := FALSE;
	  // #UserMode21Active := FALSE;
	  // #UserMode22Active := FALSE;
	  // #UserMode23Active := FALSE;
	  // #UserMode24Active := FALSE;
	  // #UserMode25Active := FALSE;
	  // #UserMode26Active := FALSE;
	  // #UserMode27Active := FALSE;
	  // #UserMode28Active := FALSE;
	  
	  CASE #instUnitModeStateManager.UnitModeCurrent OF // Set new bit for current unit mode
	    "LPMLV2022_MODE_PRODUCTION":
	      #ProductionModeActive := TRUE;
	    "LPMLV2022_MODE_MAINTENANCE":
	      #MaintenanceModeActive := TRUE;
	    "LPMLV2022_MODE_MANUAL":
	      #ManualModeActive := TRUE;
	    "LPMLV2022_MODE_USER_01":
	      #UserMode01Active := TRUE;
	    "LPMLV2022_MODE_USER_02":
	      #UserMode02Active := TRUE;
	    "LPMLV2022_MODE_USER_03":
	      #UserMode03Active := TRUE;
	    "LPMLV2022_MODE_USER_04":
	      #UserMode04Active := TRUE;
	    "LPMLV2022_MODE_USER_05":
	      #UserMode05Active := TRUE;
	    // "LPMLV2022_MODE_USER_06":
	    //   #UserMode06Active := TRUE;
	    // "LPMLV2022_MODE_USER_07":
	    //   #UserMode07Active := TRUE;
	    // "LPMLV2022_MODE_USER_08":
	    //   #UserMode08Active := TRUE;
	    // "LPMLV2022_MODE_USER_09":
	    //   #UserMode09Active := TRUE;
	    // "LPMLV2022_MODE_USER_10":
	    //   #UserMode10Active := TRUE;
	    // "LPMLV2022_MODE_USER_11":
	    //   #UserMode11Active := TRUE;
	    // "LPMLV2022_MODE_USER_12":
	    //   #UserMode12Active := TRUE;
	    // "LPMLV2022_MODE_USER_13":
	    //   #UserMode13Active := TRUE;
	    // "LPMLV2022_MODE_USER_14":
	    //   #UserMode14Active := TRUE;
	    // "LPMLV2022_MODE_USER_15":
	    //   #UserMode15Active := TRUE;
	    // "LPMLV2022_MODE_USER_16":
	    //   #UserMode16Active := TRUE;
	    // "LPMLV2022_MODE_USER_17":
	    //   #UserMode17Active := TRUE;
	    // "LPMLV2022_MODE_USER_18":
	    //   #UserMode18Active := TRUE;
	    // "LPMLV2022_MODE_USER_19":
	    //   #UserMode19Active := TRUE;
	    // "LPMLV2022_MODE_USER_2"0:
	    //   #UserMode20Active := TRUE;
	    // "LPMLV2022_MODE_USER_21":
	    //   #UserMode21Active := TRUE;
	    // "LPMLV2022_MODE_USER_22":
	    //   #UserMode22Active := TRUE;
	    // "LPMLV2022_MODE_USER_23":
	    //   #UserMode23Active := TRUE;
	    // "LPMLV2022_MODE_USER_24":
	    //   #UserMode24Active := TRUE;
	    // "LPMLV2022_MODE_USER_25":
	    //   #UserMode25Active := TRUE;
	    // "LPMLV2022_MODE_USER_26":
	    //   #UserMode26Active := TRUE;
	    // "LPMLV2022_MODE_USER_27":
	    //   #UserMode27Active := TRUE;
	    // "LPMLV2022_MODE_USER_28":
	    //   #UserMode28Active := TRUE;
	    ELSE
	      ; // No bit is set
	  END_CASE;
	  
	  #statUnitModeCurrentInternalOld := #instUnitModeStateManager.UnitModeCurrent;
	END_IF;
	
	IF #instUnitModeStateManager.StateCurrent <> #statStateInternalOld THEN // Check if new state is selected 
	  // Set states of boolean interface outputs
	  // Delete old state
	  #ClearingStateActive := FALSE;
	  #StoppedStateActive := FALSE;
	  #StartingStateActive := FALSE;
	  #IdleStateActive := FALSE;
	  #SuspendedStateActive := FALSE;
	  #ExecuteStateActive := FALSE;
	  #StoppingStateActive := FALSE;
	  #AbortingStateActive := FALSE;
	  #AbortedStateActive := FALSE;
	  #HoldingStateActive := FALSE;
	  #HeldStateActive := FALSE;
	  #UnholdingStateActive := FALSE;
	  #SuspendingStateActive := FALSE;
	  #UnsuspendingStateActive := FALSE;
	  #ResettingStateActive := FALSE;
	  #CompletingStateActive := FALSE;
	  #CompletedStateActive := FALSE;
	  
	  // Set new state
	  CASE #instUnitModeStateManager.StateCurrent OF
	    "LPMLV2022_STATE_CLEARING":
	      #ClearingStateActive := TRUE;
	    "LPMLV2022_STATE_STOPPED":
	      #StoppedStateActive := TRUE;
	    "LPMLV2022_STATE_STARTING":
	      #StartingStateActive := TRUE;
	    "LPMLV2022_STATE_IDLE":
	      #IdleStateActive := TRUE;
	    "LPMLV2022_STATE_SUSPENDED":
	      #SuspendedStateActive := TRUE;
	    "LPMLV2022_STATE_EXECUTE":
	      #ExecuteStateActive := TRUE;
	    "LPMLV2022_STATE_STOPPING":
	      #StoppingStateActive := TRUE;
	    "LPMLV2022_STATE_ABORTING":
	      #AbortingStateActive := TRUE;
	    "LPMLV2022_STATE_ABORTED":
	      #AbortedStateActive := TRUE;
	    "LPMLV2022_STATE_HOLDING":
	      #HoldingStateActive := TRUE;
	    "LPMLV2022_STATE_HELD":
	      #HeldStateActive := TRUE;
	    "LPMLV2022_STATE_UNHOLDING":
	      #UnholdingStateActive := TRUE;
	    "LPMLV2022_STATE_SUSPENDING":
	      #SuspendingStateActive := TRUE;
	    "LPMLV2022_STATE_UNSUSPENDING":
	      #UnsuspendingStateActive := TRUE;
	    "LPMLV2022_STATE_RESETTING":
	      #ResettingStateActive := TRUE;
	    "LPMLV2022_STATE_COMPLETING":
	      #CompletingStateActive := TRUE;
	    "LPMLV2022_STATE_COMPLETED":
	      #CompletedStateActive := TRUE;
	    ELSE
	      ;
	  END_CASE; // End: Set new state
	  
	  #statStateInternalOld := #instUnitModeStateManager.StateCurrent;
	END_IF;// End: Write boolean interface outputs
	
	#unitModeChangeNotAllowed := #instUnitModeStateManager.unitModeChangeNotAllowed;
	#cntrlCmdNotAllowed       := #instUnitModeStateManager.cntrlCmdNotAllowed;
END_FUNCTION_BLOCK

